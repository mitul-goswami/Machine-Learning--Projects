# -*- coding: utf-8 -*-
"""Breast Cancer Detection_Mitul.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y_kDmjhdqQJtvGsdTrmQUS3W6L0wIE9F
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import time

# Load the dataset
df = pd.read_csv("https://drive.google.com/uc?id=1-Cl3x-a7kAAfNooyDEZLNp-Xly50WxeO")

# Split the data into features (X) and labels (y)
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the SVM classifier
clf = SVC()

# Train the model and measure the runtime
start_time = time.time()
clf.fit(X_train, y_train)
end_time = time.time()

# Calculate the runtime
runtime = end_time - start_time

# Make predictions on the test set
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Runtime:", runtime, "seconds")

# Initialize the StandardScaler
scaler = StandardScaler()

# Fit and transform the training data and measure the runtime
start_time = time.time()
X_train_scaled = scaler.fit_transform(X_train)
end_time = time.time()

# Calculate the runtime
runtime = end_time - start_time

# Transform the test data
X_test_scaled = scaler.transform(X_test)

# Initialize and train the SVM model with scaled data and measure the runtime
start_time = time.time()
clf = SVC()
clf.fit(X_train_scaled, y_train)
end_time = time.time()

# Calculate the runtime
runtime = end_time - start_time

# Make predictions on the scaled test set
y_pred_scaled = clf.predict(X_test_scaled)

# Evaluate the model with scaled data
accuracy_scaled = accuracy_score(y_test, y_pred_scaled)
print('\n')
print("Accuracy with feature scaling:", accuracy_scaled)
print("Runtime:", runtime, "seconds")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import QuantileTransformer
import time

# Load the dataset
df = pd.read_csv("https://drive.google.com/uc?id=1-Cl3x-a7kAAfNooyDEZLNp-Xly50WxeO")

# Split the data into features (X) and labels (y)
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the SVM classifier
clf = SVC()

# Train the model and measure the runtime
start_time = time.time()
clf.fit(X_train, y_train)
end_time = time.time()

# Calculate the runtime
runtime = end_time - start_time

# Make predictions on the test set
y_pred = clf.predict(X_test)


# Apply feature scaling using StandardScaler and measure the runtime
start_time = time.time()
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
end_time = time.time()

# Calculate the runtime
runtime = end_time - start_time

# Initialize and train the SVM model with scaled data and measure the runtime
start_time = time.time()
clf_scaled = SVC()
clf_scaled.fit(X_train_scaled, y_train)
end_time = time.time()

# Calculate the runtime
runtime_scaled = end_time - start_time

# Make predictions on the scaled test set
y_pred_scaled = clf_scaled.predict(X_test_scaled)

# Evaluate the model with scaled data
accuracy_scaled = accuracy_score(y_test, y_pred_scaled)
print("Accuracy Before Quantization:", accuracy_scaled)
print('\n')
print("Runtime for SVM before quantization:", runtime_scaled, "seconds")
print('\n')

# Apply post-training quantization using QuantileTransformer and measure the runtime
start_time = time.time()
quant_transformer = QuantileTransformer(n_quantiles=4)
X_train_quantized = quant_transformer.fit_transform(X_train_scaled)
X_test_quantized = quant_transformer.transform(X_test_scaled)
end_time = time.time()

# Calculate the runtime
runtime_quantization = end_time - start_time

# Retrain the model on the quantized data and measure the runtime
start_time = time.time()
clf_quantized = SVC()
clf_quantized.fit(X_train_quantized, y_train)
end_time = time.time()

# Calculate the runtime
runtime_quantized = end_time - start_time

# Make predictions on the quantized test set
y_pred_quantized = clf_quantized.predict(X_test_quantized)

# Evaluate the quantized model
accuracy_quantized = accuracy_score(y_test, y_pred_quantized)
print('\n')
print('\n')
print("Accuracy after quantization:", accuracy_quantized)
print('\n')
print("Runtime for SVM after quantization:", runtime_quantized, "seconds")
print('\n')